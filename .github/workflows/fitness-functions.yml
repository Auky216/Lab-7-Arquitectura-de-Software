# .github/workflows/fitness-functions.yml
name: Fitness Functions CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 */6 * * *'

jobs:
  fitness-function-1-search-performance:
    name: "Fitness Function 1: Search Performance < 3000ms"
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install requests
    
    - name: Start application in background
      run: |
        nohup python main.py > app.log 2>&1 &
        echo $! > app.pid
      env:
        JWT_SECRET: test-secret-key
    
    - name: Wait for application startup
      run: |
        echo "Waiting for application to start..."
        for i in {1..30}; do
          if curl -s http://localhost:3000/ > /dev/null 2>&1; then
            echo "Application is ready!"
            break
          fi
          echo "Attempt $i: Waiting..."
          sleep 2
        done
        
        # Show logs if startup failed
        if ! curl -s http://localhost:3000/ > /dev/null 2>&1; then
          echo "Application failed to start. Logs:"
          cat app.log
          exit 1
        fi
    
    - name: Run Search Performance Test
      run: |
        python << 'EOF'
        import requests
        import time
        import json
        import sys
        
        try:
            # Test health first
            health_response = requests.get('http://localhost:3000/api/v1/health', timeout=10)
            print(f"Health check: {health_response.status_code}")
            
            # Login to get token
            login_response = requests.post('http://localhost:3000/api/v1/auth/login', 
                                         json={'email': 'student@utec.edu.pe', 'password': 'password123'},
                                         timeout=10)
            if login_response.status_code != 200:
                print(f"Login failed: {login_response.status_code} - {login_response.text}")
                sys.exit(1)
                
            token = login_response.json()['access_token']
            headers = {'Authorization': f'Bearer {token}'}
            
            # Test search performance
            search_queries = [
                'machine learning',
                'deep learning', 
                'artificial intelligence'
            ]
            
            violations = 0
            total_tests = 0
            results = []
            
            for query in search_queries:
                start_time = time.time()
                try:
                    response = requests.get(f'http://localhost:3000/api/v1/search',
                                          params={'q': query, 'limit': 10},
                                          headers=headers,
                                          timeout=15)
                    duration_ms = (time.time() - start_time) * 1000
                    
                    total_tests += 1
                    results.append({
                        'query': query,
                        'duration_ms': round(duration_ms, 2),
                        'status_code': response.status_code,
                        'violation': duration_ms > 3000
                    })
                    
                    if duration_ms > 3000:
                        violations += 1
                        print(f'VIOLATION: Search "{query}" took {duration_ms:.2f}ms > 3000ms threshold')
                    else:
                        print(f'PASS: Search "{query}" took {duration_ms:.2f}ms')
                        
                except requests.exceptions.RequestException as e:
                    print(f'ERROR: Search "{query}" failed: {e}')
                    total_tests += 1
                    violations += 1
            
            # Calculate metrics
            if results:
                avg_duration = sum(r['duration_ms'] for r in results) / len(results)
                p95_duration = sorted([r['duration_ms'] for r in results])[int(len(results) * 0.95)] if len(results) > 1 else results[0]['duration_ms']
            else:
                avg_duration = 0
                p95_duration = 0
                
            violation_rate = (violations / total_tests) * 100 if total_tests > 0 else 100
            
            print(f'\nSEARCH PERFORMANCE SUMMARY:')
            print(f'Total tests: {total_tests}')
            print(f'Violations: {violations}')
            print(f'Violation rate: {violation_rate:.1f}%')
            print(f'Average duration: {avg_duration:.2f}ms')
            print(f'P95 duration: {p95_duration:.2f}ms')
            
            # Fitness function criteria (relaxed for POC)
            if violation_rate > 50:  # Allow 50% violation rate for POC
                print(f'FITNESS FUNCTION FAILED: {violation_rate:.1f}% > 50% violation rate')
                sys.exit(1)
            elif p95_duration > 3000:
                print(f'FITNESS FUNCTION FAILED: P95 {p95_duration:.2f}ms > 3000ms threshold')
                sys.exit(1)
            else:
                print(f'FITNESS FUNCTION PASSED: Search performance within acceptable limits')
                
        except Exception as e:
            print(f'Test failed with error: {e}')
            sys.exit(1)
        EOF
    
    - name: Show application logs on failure
      if: failure()
      run: |
        echo "Application logs:"
        cat app.log || echo "No logs found"
    
    - name: Stop application
      if: always()
      run: |
        if [ -f app.pid ]; then
          kill $(cat app.pid) || true
        fi

  fitness-function-2-data-integrity:
    name: "Fitness Function 2: Metadata Consistency â‰¥ 95%"
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install requests
    
    - name: Start application in background
      run: |
        nohup python main.py > app.log 2>&1 &
        echo $! > app.pid
      env:
        JWT_SECRET: test-secret-key
    
    - name: Wait for application startup
      run: |
        echo "Waiting for application to start..."
        for i in {1..30}; do
          if curl -s http://localhost:3000/ > /dev/null 2>&1; then
            echo "Application is ready!"
            break
          fi
          echo "Attempt $i: Waiting..."
          sleep 2
        done
    
    - name: Run Data Integrity Test
      run: |
        python << 'EOF'
        import requests
        import json
        import sys
        import time
        
        try:
            # Wait a bit more for full startup
            time.sleep(5)
            
            # Login as admin
            login_response = requests.post('http://localhost:3000/api/v1/auth/login', 
                                         json={'email': 'admin@utec.edu.pe', 'password': 'admin123'},
                                         timeout=10)
            if login_response.status_code != 200:
                print(f"Admin login failed: {login_response.status_code}")
                sys.exit(1)
                
            token = login_response.json()['access_token']
            headers = {'Authorization': f'Bearer {token}'}
            
            # Get all papers
            response = requests.get('http://localhost:3000/api/v1/search',
                                  params={'limit': 50},
                                  headers=headers,
                                  timeout=10)
            
            if response.status_code != 200:
                print(f"Search failed: {response.status_code}")
                sys.exit(1)
                
            papers = response.json()['data']
            total_papers = len(papers)
            
            if total_papers == 0:
                print("No papers found in database")
                sys.exit(1)
            
            integrity_issues = 0
            issue_details = []
            
            print(f'Analyzing {total_papers} papers for metadata integrity...')
            
            for paper in papers:
                issues_found = []
                
                # Check required fields
                if not paper.get('title') or len(paper['title'].strip()) < 5:
                    issues_found.append('Invalid title')
                
                if not paper.get('authors') or len(paper['authors']) == 0:
                    issues_found.append('Missing authors')
                
                if not paper.get('year') or paper['year'] < 1900 or paper['year'] > 2025:
                    issues_found.append('Invalid year')
                
                # Check DOI format
                doi = paper.get('doi')
                if doi and not (doi.startswith('10.') or doi.startswith('arxiv:')):
                    issues_found.append('Invalid DOI format')
                
                # Check citation count validity
                if paper.get('citation_count', 0) < 0:
                    issues_found.append('Invalid citation count')
                
                if issues_found:
                    integrity_issues += 1
                    issue_details.append({
                        'paper_id': paper.get('id', 'unknown'),
                        'title': paper.get('title', 'unknown')[:50],
                        'issues': issues_found
                    })
            
            # Calculate integrity percentage
            valid_papers = total_papers - integrity_issues
            integrity_percentage = (valid_papers / total_papers) * 100 if total_papers > 0 else 0
            
            print(f'\nMETADATA INTEGRITY SUMMARY:')
            print(f'Total papers analyzed: {total_papers}')
            print(f'Papers with issues: {integrity_issues}')
            print(f'Valid papers: {valid_papers}')
            print(f'Integrity percentage: {integrity_percentage:.2f}%')
            
            # Show details of issues
            if issue_details:
                print(f'\nISSUES FOUND:')
                for detail in issue_details[:3]:  # Show first 3 issues
                    print(f'  - {detail["paper_id"]}: {detail["title"]} - {detail["issues"]}')
                if len(issue_details) > 3:
                    print(f'  ... and {len(issue_details) - 3} more issues')
            
            # Fitness function criteria: â‰¥ 95% metadata consistency (relaxed for POC)
            threshold = 95.0
            if integrity_percentage < threshold:
                print(f'FITNESS FUNCTION FAILED: {integrity_percentage:.2f}% < {threshold}% threshold')
                sys.exit(1)
            else:
                print(f'FITNESS FUNCTION PASSED: Metadata integrity {integrity_percentage:.2f}% >= {threshold}%')
                
        except Exception as e:
            print(f'Data integrity test failed: {e}')
            sys.exit(1)
        EOF
    
    - name: Stop application
      if: always()
      run: |
        if [ -f app.pid ]; then
          kill $(cat app.pid) || true
        fi

  fitness-functions-report:
    name: "Fitness Functions Summary"
    needs: [fitness-function-1-search-performance, fitness-function-2-data-integrity]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Generate Summary Report
      run: |
        echo "# Fitness Functions Execution Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Fitness Function | Status | Threshold |" >> $GITHUB_STEP_SUMMARY
        echo "|------------------|--------|-----------|" >> $GITHUB_STEP_SUMMARY
        echo "| Search Performance | ${{ needs.fitness-function-1-search-performance.result }} | < 3000ms (50% tolerance) |" >> $GITHUB_STEP_SUMMARY
        echo "| Data Integrity | ${{ needs.fitness-function-2-data-integrity.result }} | >= 95% metadata consistency |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## POC Status" >> $GITHUB_STEP_SUMMARY
        echo "- Performance: Relaxed threshold for development environment" >> $GITHUB_STEP_SUMMARY
        echo "- Reliability: Metadata validation active" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "*Executed on: $(date)*" >> $GITHUB_STEP_SUMMARY
    
    - name: Final status
      run: |
        if [ "${{ needs.fitness-function-1-search-performance.result }}" = "failure" ] || [ "${{ needs.fitness-function-2-data-integrity.result }}" = "failure" ]; then
          echo "One or more fitness functions failed"
          exit 1
        else
          echo "All fitness functions passed"
        fi